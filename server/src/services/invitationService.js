import { StatusCodes } from "http-status-codes";
import { boardModel } from "~/models/boardModel";
import { userModel } from "~/models/userModel";
import { invitationModel } from "~/models/invitationModel";
import ApiError from "~/utils/ApiError";
import { INVITATION_TYPES, BOARD_INVITATION_STATUS } from "~/utils/constants";
import { pickUser } from "~/utils/formatter";

const createNewBoardInvitation = async (reqBody, inviterId) => {
  try {
    // Inviter: l√† ng∆∞·ªùi ƒëi m·ªùi - ng∆∞·ªùi ƒëang req, v√¨ v·∫≠y ch√∫ng ta t√¨m ki·∫øm theo id l·∫•y t·ª´ token
    const inviter = await userModel.findOneById(inviterId);
    // Invitee: ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi l·∫•y theo email nh·∫≠n t·ª´ ph√≠a FE
    const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail);
    // T√¨m board ƒë·ªÉ l·∫•y data x·ª≠ l√Ω
    const board = await boardModel.findBoardById(reqBody.boardId);

    // N·∫øu kh√¥ng c√≥ c√°i n√†o trong 3 c√°i ƒë√≥ t·ªìn t·∫°i => reject
    if (!invitee || !inviter || !board) {
      throw new ApiError(
        StatusCodes.NOT_FOUND,
        "Inviter, Invitee or Board not found!"
      );
    }

    // T·∫°o data ƒë·ªÉ l∆∞u v√†o db
    const newInvitationData = {
      inviterId,
      inviteeId: invitee._id.toString(), // chuy·ªÉn t·ª´ ObjectId() -> String v√¨ sang b√™n Model c√≥ check l·∫°i
      type: INVITATION_TYPES.BOARD_INVITATION,
      boardInvitation: {
        boardId: board._id.toString(),
        status: BOARD_INVITATION_STATUS.PENDING, // default: pending
      },
    };

    // G·ªçi sang model ƒë·ªÉ l∆∞u v√†o DB
    const createdInvitation = await invitationModel.createNewBoardInvitation(
      newInvitationData
    );
    const getInvitation = await invitationModel.findOneById(
      createdInvitation.insertedId
    );

    // Ngo√†i th√¥ng tin c·ªßa board invitation m·ªõi t·∫°o th√¨ tr·∫£ ƒë·ªß v·ªÅ lu√¥n c·∫£ board, inviter, invitee cho FE x·ª≠ l√Ω tho·∫£i m√°i.
    const resInvitation = {
      ...getInvitation,
      board,
      inviter: pickUser(inviter),
      invitee: pickUser(invitee),
    };

    return resInvitation;
  } catch (error) {
    throw error;
  }
};

const getInvitations = async (userId) => {
  try {
    const getInvitations = await invitationModel.findByUser(userId);
    // console.log("üöÄ ~ getInvitations ~ getInvitations:", getInvitations);
    // V√¨ c√°c d·ªØ li·ªáu inviter, invitee v√† board l√† ƒëang ·ªü gi√° tr·ªã m√†ng 1 ph·∫ßn t·ª≠ n·∫øu l·∫•y ra ƒë∆∞·ª£c n√™n ch√∫ng ta bi·∫øn ƒë·ªïi n√≥ v·ªÅ Json Object tr∆∞·ªõc khi tr·∫£ v·ªÅ cho ph√≠a FE
    const resInvitations = getInvitations.map((i) => ({
      ...i,
      inviter: i.inviter[0] || {},
      invitee: i.invitee[0] || {},
      board: i.board[0] || {},
    }));

    return resInvitations;
  } catch (error) {
    throw error;
  }
};

const updateBoardInvitation = async (userId, invitationId, status) => {
  try {
    // T√¨m b·∫£n ghi invitation trong model
    const getInvitation = await invitationModel.findOneById(invitationId);
    if (!getInvitation)
      throw new ApiError(StatusCodes.NOT_FOUND, "Invitation not found!");

    // Sau khi c√≥ Invitaion r·ªìi th√¨ l·∫•y full th√¥ng tin c·ªßa board
    const boardId = getInvitation.boardInvitation.boardId;
    const getBoard = await boardModel.findBoardById(boardId);
    if (!getBoard)
      throw new ApiError(StatusCodes.NOT_FOUND, "Board not found!");

    // Ki·ªÉm tra xem n·∫øu status l√† ACCEPTED join board m√† c√°i th·∫±ng user (invitee) ƒë√£ l√† owner ho·∫∑c member c·ªßa board r·ªìi th√¨ tr·∫£ v·ªÅ th√¥ng b√°o l·ªói lu√¥n.
    // Note: 2 m·∫£ng memberIds v√† ownerIds c·ªßa board n√≥ ƒëang l√† ki·ªÉu d·ªØ li·ªáu ObjectId n√™n cho n√≥ v·ªÅ String h·∫øt
    const boardOwnerAndMemberIds = [
      ...getBoard.ownerIds,
      ...getBoard.memberIds,
    ].toString();

    if (
      status === BOARD_INVITATION_STATUS.ACCEPTED &&
      boardOwnerAndMemberIds.includes(userId)
    ) {
      throw new ApiError(
        StatusCodes.NOT_ACCEPTABLE,
        "You are already a member of this board!"
      );
    }

    // T·∫°o d·ªØ li·ªáu ƒë·ªÉ update b·∫£n ghi Invitation
    const updateData = {
      boardInvitation: {
        ...getInvitation.boardInvitation,
        status: status, // status from ACCEPTED or REJECTED from FE push
      },
    };

    // B∆∞·ªõc 1: C·∫≠p nh·∫≠t status trong b·∫£n ghi Invitation
    const updatedInvitation = await invitationModel.update(
      invitationId,
      updateData
    );

    // B∆∞·ªõc 2: N·∫øu tr∆∞·ªùng h·ª£p Accept m·ªôt l·ªùi m·ªùi th√†nh c√¥ng, th√¨ c·∫ßn ph·∫£i th√™m th√¥ng tin c·ªßa th·∫±ng user (userId) v√†o b·∫£n ghi memberIds trong collection board.
    if (
      updatedInvitation.boardInvitation.status ===
      BOARD_INVITATION_STATUS.ACCEPTED
    ) {
      await boardModel.pushMemberIds(boardId, userId);
    }

    return updatedInvitation;
  } catch (error) {
    throw error;
  }
};
export const invitationService = {
  createNewBoardInvitation,
  getInvitations,
  updateBoardInvitation,
};
