import Joi from "joi";
import { ObjectId } from "mongodb";
import { GET_DB } from "~/config/mongodb";
import { BOARD_TYPES } from "~/utils/constants";
import { OBJECT_ID_RULE, OBJECT_ID_RULE_MESSAGE } from "~/utils/validators";
import { columnModel } from "./columnModel";
import { cardModel } from "./cardModel";
import { pagingSkipValue } from "~/utils/algorithms";
import { userModel } from "./userModel";

// Define Collection (name & schema)
const BOARD_COLLECTION_NAME = "boards";
const BOARD_COLLECTION_SCHEMA = Joi.object({
  title: Joi.string().required().min(3).max(50).trim().strict(),
  slug: Joi.string().required().min(3).trim().strict(),
  description: Joi.string().required().min(3).max(256).trim().strict(),
  /**
   * Tips: Thay v√¨ g·ªçi l·∫ßn l∆∞·ª£t t·∫•t c·∫£ type c·ªßa board ƒë·ªÅ cho v√†o h√†m valid() th√¨ c√≥ th·ªÉ vi·∫øt g·ªçn l·∫°i b·∫±ng Object.values() k·∫øt h·ª£p Spread Operator c·ªßa JS. C·ª• th·ªÉ: .valid(...Object.values(BOARD_TYPES))
   * L√†m nh∆∞ tr√™n th√¨ sau n√†y d√π c√°c b·∫°n c√≥ th√™m hay s·ª≠a g√¨ v√†o c√°i BOARD_TYPES trong file constants th√¨ ·ªü nh·ªØng ch·ªó d√πng Joi trong Model hay Validation c≈©ng kh√¥ng c·∫ßn ph·∫£i ƒë·ª•ng v√†o n·ªØa. T·ªëi ∆∞u g·ªçn g√†ng lu√¥n.
   */
  type: Joi.string()
    .valid(...Object.values(BOARD_TYPES))
    .required(),

  // C√°c item trong m·∫£ng columnOrderIds l√† ObjectId n√™n c·∫ßn th√™m pattern cho chu·∫©n
  columnOrderIds: Joi.array()
    .items(Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE))
    .default([]),
  // Admin board
  ownerIds: Joi.array()
    .items(Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE))
    .default([]),

  // Members of board
  memberIds: Joi.array()
    .items(Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE))
    .default([]),

  createdAt: Joi.date().timestamp("javascript").default(Date.now),
  updatedAt: Joi.date().timestamp("javascript").default(null),
  _destroy: Joi.boolean().default(false),
});

// Ch·ªâ ra nh·ªØng field ko cho ph√©p c·∫≠p nh·∫≠t trong h√†m update
const INVALID_UPDATE_FIELDS = ["_id", "createdAt"];

const validateBeforeCreate = async (data) => {
  return await BOARD_COLLECTION_SCHEMA.validateAsync(data, {
    abortEarly: false,
  });
};

const createNew = async (userId, data) => {
  try {
    const validData = await validateBeforeCreate(data);
    const newBoardToAdd = {
      ...validData,
      ownerIds: [new ObjectId(userId)],
    };
    const createdBoard = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .insertOne(newBoardToAdd);
    return createdBoard;
  } catch (error) {
    throw new Error(error);
  }
};

const findBoardById = async (boardId) => {
  try {
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOne({ _id: new ObjectId(boardId) });
    return result;
  } catch (error) {
    throw new Error(error);
  }
};

// Query t·ªïng h·ª£p (aggregate) ƒë·ªÉ l·∫•y to√†n b·ªô Columns v√† Cards thu·ªôc v·ªÅ Board
const getDetails = async (userId, boardId) => {
  try {
    const queryCondition = [
      {
        _id: new ObjectId(boardId),
      },
      { _destroy: false },
      {
        $or: [
          {
            ownerIds: { $all: [new ObjectId(userId)] },
          },
          {
            memberIds: { $all: [new ObjectId(userId)] },
          },
        ],
      },
    ];
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .aggregate([
        { $match: { $and: queryCondition } },
        {
          $lookup: {
            from: columnModel.COLUMN_COLLECTION_NAME,
            localField: "_id",
            foreignField: "boardId",
            as: "columns",
          },
        },
        {
          $lookup: {
            from: cardModel.CARD_COLLECTION_NAME,
            localField: "_id",
            foreignField: "boardId",
            as: "cards",
          },
        },
        {
          $lookup: {
            from: userModel.USER_COLLECTION_NAME,
            localField: "ownerIds",
            foreignField: "_id",
            as: "owners",
            // pipeline trong lookup l√† ƒë·ªÉ x·ª≠ l√Ω m·ªôt ho·∫∑c nhi·ªÅu lu·ªìng c·∫ßn thi·∫øt
            // $project ƒë·ªÉ ch·ªâ ƒë·ªãnh m·ªôt s·ªë field kh√¥ng mu·ªën truy xu·∫•t b·∫±ng c√°ch g√°n cho n√≥ gi√° tr·ªã 0
            pipeline: [{ $project: { password: 0, verifyToken: 0 } }],
          },
        },
        {
          $lookup: {
            from: userModel.USER_COLLECTION_NAME,
            localField: "memberIds",
            foreignField: "_id",
            as: "members",
            pipeline: [{ $project: { password: 0, verifyToken: 0 } }],
          },
        },
      ])
      .toArray();

    return result[0] || null;
  } catch (error) {
    throw new Error(error);
  }
};

// Push columnId v√†o cu·ªëi m·∫£ng columnOrderIds
// ƒê·∫©y 1 ph·∫©n t·ª≠ columnId v√†o cu·ªëi m·∫£ng columnOrderIds
// D√πng $push trong mongoDB ·ªü case n√†y ƒë·ªÉ th√™m 1 ptu v√†o cu·ªëi
const pushColumnOrderIds = async (column) => {
  try {
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOneAndUpdate(
        // filter
        { _id: new ObjectId(column.boardId) },
        // update
        { $push: { columnOrderIds: new ObjectId(column._id) } },
        // options: "after" returns the updated document
        { returnDocument: "after" }
      );

    return result;
  } catch (error) {
    throw new Error(error);
  }
};

// L·∫•y 1 ph·∫©n t·ª≠ columnId ra kh·ªèi m·∫£ng columnOrderIds
// D√πng $pull trong mongoDB ·ªü case n√†y ƒë·ªÉ l·∫•y 1 ptu ra kh·ªèi m·∫£ng r·ªìi x√≥a n√≥
const pullColumnOrderIds = async (column) => {
  try {
    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOneAndUpdate(
        // filter
        { _id: new ObjectId(column.boardId) },
        // update
        { $pull: { columnOrderIds: new ObjectId(column._id) } },
        // options: "after" returns the updated document
        { returnDocument: "after" }
      );

    return result;
  } catch (error) {
    throw new Error(error);
  }
};

const update = async (boardId, updateData) => {
  try {
    // L·ªçc nh·ªØng field ko cho ph√©p c·∫≠p nh·∫≠t
    Object.keys(updateData).forEach((fieldName) => {
      if (INVALID_UPDATE_FIELDS.includes(fieldName)) {
        delete updateData(fieldName);
      }
    });

    // ƒê·ªëi v·ªõi d·ªØ li·ªáu li√™n quan ƒë·∫øn ObjectId, bi·∫øn ƒë·ªïi ·ªü ƒë√¢y
    if (updateData.columnOrderIds) {
      updateData.columnOrderIds = updateData.columnOrderIds.map(
        (_id) => new ObjectId(_id)
      );
    }

    const result = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .findOneAndUpdate(
        // filter
        { _id: new ObjectId(boardId) },
        // update
        { $set: updateData },
        // options: "after" returns the updated document
        { returnDocument: "after" }
      );

    return result;
  } catch (error) {
    throw new Error(error);
  }
};

const getBoards = async (userId, page, itemsPerPage) => {
  try {
    const queryCondition = [
      // ƒêi·ªÅu ki·ªán 01: Board ch∆∞a b·ªã x√≥a
      { _destroy: false },
      // ƒêi·ªÅu ki·ªán 2: userId ƒëang th·ª±c hi·ªán req n√†y ph·∫£i thu·ªôc 1 trong 2 m·∫£ng ownerIds (admin board) ho·∫∑c memberIds (th√†nh vi√™n c·ªßa board) => use to√°n t·ª≠ $all c·ªßa mongodb
      // https://www.mongodb.com/docs/v6.0/reference/operator/query/all/
      {
        $or: [
          {
            ownerIds: { $all: [new ObjectId(userId)] },
          },
          {
            memberIds: { $all: [new ObjectId(userId)] },
          },
        ],
      },
    ];

    const query = await GET_DB()
      .collection(BOARD_COLLECTION_NAME)
      .aggregate(
        [
          { $match: { $and: queryCondition } },
          // sort title A -> Z (m·∫∑c ƒë·ªãnh B ƒë·ª©ng tr∆∞·ªõc a th∆∞·ªùng theo chu·∫©n b·∫£ng m√£ ASCII)
          { $sort: { title: 1 } },
          // facet: x·ª≠ l√Ω nhi·ªÅu lu·ªìng trong 1 query
          {
            $facet: {
              // Lu·ªìng th·ª© nh·∫•t: Query boards
              queryBoards: [
                { $skip: pagingSkipValue(page, itemsPerPage) }, // B·ªè qua s·ªë l∆∞·ª£ng b·∫£n ghi c·ªßa nh·ªØng page tr∆∞·ªõc ƒë√≥
                { $limit: itemsPerPage }, // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng b·∫£n ghi trong 1 page
              ],
              // Lu·ªìng th·ª© hai: Query ƒë·∫øm t·ªïng t·∫•t c·∫£ s·ªë l∆∞·ª£ng b·∫£n ghi board trong DB v√† tr·∫£ v·ªÅ bi·∫øn countedAllBoards
              queryTotalBoards: [
                {
                  $count: "countedAllBoards",
                },
              ],
            },
          },
        ],
        {
          // Khai b√°o th√™m thu·ªôc t√≠nh collaction locale 'en' ƒë·ªÉ fix 'B' v√† 'a'
          // https://www.mongodb.com/docs/v6.0/reference/collation/
          collation: { locale: "en" },
        }
      )
      .toArray();
    // console.log("üöÄ ~ getBoards ~ query:", query);
    const res = query[0];
    // console.log("üöÄ ~ getBoards ~ res:", res);

    return {
      boards: res.queryBoards || [],
      totalBoards: res.queryTotalBoards[0]?.countedAllBoards || 0,
    };
  } catch (error) {
    throw new Error(error);
  }
};

export const boardModel = {
  BOARD_COLLECTION_NAME,
  BOARD_COLLECTION_SCHEMA,
  createNew,
  findBoardById,
  getDetails,
  pushColumnOrderIds,
  pullColumnOrderIds,
  update,
  getBoards,
};
